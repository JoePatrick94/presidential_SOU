axis.text = element_text(size = 7),
legend.position = "bottom",
legend.title = element_text(size = 8),
legend.text = element_text(size = 7.5),
legend.text.align = .5) +
scale_color_discrete(labels = c("Junior\n(O-1 to O-3)", "Mid-Grade\n(O-4 to O-6)", "GO/FO\n(O-7 to O-10)", "All\nPay Grades"),
type = c("#fbb4ae", "#b3cde3", "#ccebc5", "black")) +
ggsave("C:/Users/599126/Documents/ODEI/Cohort Study/Cohort Data/Cohort Report/Intersectionality Paper Visuals/PaygradeGroup_trends_whitewomen.png", width = 5, height = 3.25, units = "in")
#Cumulative distribution of years of service - Race/Ethnicity - 1978-2019
survfit <- survfit(Surv(Total_Years_Served)~race_gender, data = PersonnelShortSingle2[PersonnelShortSingle2$race_gender %in% c("White Women", "Bl. Wom."),])
plot <- ggsurvplot(fit = survfit,
xlim = c(0,35),
break.time.by = 5,
ggtheme = theme_minimal(),
surv.median.line = "v",
ylab = "Proportion of Retained Officer Corps",
xlab = "Total Years Served",
legend.labs = c("Black/AA", "White"),
legend.title = "",
palette = c(asian_color, white_color),
size = 1,
surv.scale = "percent")
ggpar(p = plot, font.legend = 10,
font.tickslab = 8,
font.x = 9,
font.y = 9,
legend = "bottom")
#Cumulative distribution of years of service - Race/Ethnicity - 2001-2019
survfit <- survfit(Surv(Total_Years_Served)~race_gender, data = PersonnelShortSingle2[PersonnelShortSingle2$race_gender %in% c("White Women", "Bl. Wom.") & PersonnelShortSingle2$FYofRecord %in% c(2001:2019),])
plot <- ggsurvplot(fit = survfit,
xlim = c(0,35),
break.time.by = 5,
ggtheme = theme_minimal(),
surv.median.line = "v",
ylab = "Proportion of Retained Officer Corps",
xlab = "Total Years Served",
legend.labs = c("Black/AA", "White"),
legend.title = "",
palette = c(asian_color, white_color),
size = 1,
surv.scale = "percent")
ggpar(p = plot, font.legend = 10,
font.tickslab = 8,
font.x = 9,
font.y = 9,
legend = "bottom")
# representation from 1978 - 2019
# representation steadily increases from 1978 to 2000. Since 2000 there has been a leveling off
df <- personnel_FY %>%
group_by(FYofRecord, race_gender) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count)) %>%
filter(race_gender == "Bl. Wom.")
lm_overall <- lm(freq~FYofRecord, data = df)
summary(lm_overall)$coef[2,1]*100
personnel_FY %>%
group_by(FYofRecord, race_gender) %>%
summarise(count = n()) %>%
mutate(freq = count/sum(count)) %>%
filter(race_gender == "Bl. Wom.") %>%
ggplot(aes(x = FYofRecord, y = freq)) +
geom_line() +
scale_y_continuous(labels = scales::percent,
limits = c(0,.25)) +
theme_bw() +
labs(title = "Black/AA Women Representation from 1976 to 2019") +
xlab("") +
ylab("Percent Representation") +
geom_smooth(method = "lm", formula = y~x, se = F) +
geom_label(label = "slope = .05% per year, R2 = .75",
y=.2,x=1990)
seq(0,9,1)
seq(start = 0,end = 9,1)
seq(start = 0,end = 9,by = 1)
?seq
seq(from = 0,to = 9,by = 1)
#load libraries
library(tidyverse)
library(rvest)
library(lubridate)
library(data.table)
#Function to get the years active of a president
get_years_active <- function(SOTU_pagelinks){
sotupage <- read_html(SOTU_pagelinks)
years_active <- sotupage %>%
html_nodes(".dates") %>%
html_text() %>%
gsub("\\s+", "",.)
return(years_active)
}
#Function to get the political party of president
get_party <- function(presidential_biolinks){
biopage <- read_html(presidential_biolinks)
party <- biopage %>% html_nodes("#block-system-main :nth-child(9)") %>% html_text()
return(party)
}
sotu_df <- data.frame()
for (page_number in seq(from = 0, to = 9,by=1)) {
#State of the Union page that has all the state of the union addresses
SOTUlistpage <- read_html(paste("https://www.presidency.ucsb.edu/documents/app-categories/spoken-addresses-and-remarks/presidential/state-the-union-addresses?page=",page_number, sep = ""))
#Get president name
president <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_text()
#Get year of SOTU speech
year <- SOTUlistpage %>%
html_nodes(".date-display-single") %>%
html_text() %>%
str_sub(-4) %>%
as.numeric()
#Get years active of president
SOTU_pagelinks <- SOTUlistpage %>%
html_nodes(".field-title a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
years_active <- sapply(SOTU_pagelinks, get_years_active)
#Get the party part of the president
presidential_biolinks <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
party <- sapply(presidential_biolinks, get_party)
#Get text of each SOTU speech
text <- sapply(SOTU_pagelinks, get_speech)
#Bind rows together
sotu_df <- rbind(sotu_df, data.frame(president, year, years_active, party, text))
print(paste("page number:",page_number))
}
get_years_active <- function(SOTU_pagelinks){
sotupage <- read_html(SOTU_pagelinks)
years_active <- sotupage %>%
html_nodes(".dates") %>%
html_text() %>%
gsub("\\s+", "",.)
return(years_active)
}
#Function to get the political party of president
get_party <- function(presidential_biolinks){
biopage <- read_html(presidential_biolinks)
party <- biopage %>% html_nodes("#block-system-main :nth-child(9)") %>% html_text()
return(party)
}
#Function to get the SOTU text for each president
get_speech <- function(SOTU_pagelinks){
sotulink <- read_html(SOTU_pagelinks)
text <- sotulink %>%
html_nodes(".field-docs-content") %>%
html_text() %>%
str_replace_all("\\s*\\[[^\\]]+\\]", "") %>% #remove bracket text, such as ...[laughter]...
str_replace_all("\n","") %>% #remove instances of \n
str_replace_all("Audience Members.*The President\\.", "") %>% #Take out text from The Audience. --> The President.
str_replace_all("The President\\.", "") %>% # Take out text indicating the president is speaking -> The President.
trimws(which = "both")
return(text)
}
sotu_df <- data.frame()
for (page_number in seq(from = 0, to = 9,by=1)) {
#State of the Union page that has all the state of the union addresses
SOTUlistpage <- read_html(paste("https://www.presidency.ucsb.edu/documents/app-categories/spoken-addresses-and-remarks/presidential/state-the-union-addresses?page=",page_number, sep = ""))
#Get president name
president <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_text()
#Get year of SOTU speech
year <- SOTUlistpage %>%
html_nodes(".date-display-single") %>%
html_text() %>%
str_sub(-4) %>%
as.numeric()
#Get years active of president
SOTU_pagelinks <- SOTUlistpage %>%
html_nodes(".field-title a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
years_active <- sapply(SOTU_pagelinks, get_years_active)
#Get the party part of the president
presidential_biolinks <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
party <- sapply(presidential_biolinks, get_party)
#Ge the SOTU text
text <- sapply(SOTU_pagelinks, get_speech)
#Combine rows to the final dataset for each loop
sotu_df <- rbind(sotu_df, data.frame(president, year, years_active, party, text))
print(paste("page number:", page_number))
}
View(sotu_df)
setwd("~/Personal/presidential_SOU")
get_years_active <- function(SOTU_pagelinks){
sotupage <- read_html(SOTU_pagelinks)
years_active <- sotupage %>%
html_nodes(".dates") %>%
html_text() %>%
gsub("\\s+", "",.)
return(years_active)
}
#Function to get the political party of president
get_party <- function(presidential_biolinks){
biopage <- read_html(presidential_biolinks)
party <- biopage %>% html_nodes("#block-system-main :nth-child(9)") %>% html_text()
return(party)
}
#Function to get the SOTU text for each president
get_speech <- function(SOTU_pagelinks){
sotulink <- read_html(SOTU_pagelinks)
text <- sotulink %>%
html_nodes(".field-docs-content") %>%
html_text() %>%
str_replace_all("\\s*\\[[^\\]]+\\]", "") %>% #remove bracket text, such as ...[laughter]...
str_replace_all("\n","") %>% #remove instances of \n
str_replace_all("Audience Members.*The President\\.", "") %>% #Take out text from The Audience. --> The President.
str_replace_all("The President\\.", "") %>% # Take out text indicating the president is speaking -> The President.
trimws(which = "both")
return(text)
}
sotu_df <- data.frame()
for (page_number in seq(from = 0, to = 9,by=1)) {
#State of the Union page that has all the state of the union addresses
SOTUlistpage <- read_html(paste("https://www.presidency.ucsb.edu/documents/app-categories/spoken-addresses-and-remarks/presidential/state-the-union-addresses?page=",page_number, sep = ""))
#Get president name
president <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_text()
#Get year of SOTU speech
year <- SOTUlistpage %>%
html_nodes(".date-display-single") %>%
html_text() %>%
str_sub(-4) %>%
as.numeric()
#Get years active of president
SOTU_pagelinks <- SOTUlistpage %>%
html_nodes(".field-title a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
years_active <- sapply(SOTU_pagelinks, get_years_active)
#Get the party part of the president
presidential_biolinks <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
party <- sapply(presidential_biolinks, get_party)
#Ge the SOTU text
text <- sapply(SOTU_pagelinks, get_speech)
#Combine rows to the final dataset for each loop
sotu_df <- rbind(sotu_df, data.frame(president, year, years_active, party, speech_type = "speech", text, stringsAsFactors = F))
print(paste("page number:", page_number))
}
#save dataset as csv
fwrite(sotu_df, "sotu_speeches.csv")
sotu_df <- data.frame()
for (page_number in seq(from = 0, to = 13,by=1)) {
#State of the Union page that has all the state of the union messages
SOTUlistpage <- read_html(paste("https://www.presidency.ucsb.edu/documents/app-categories/spoken-addresses-and-remarks/presidential/state-the-union-messages?page=",page_number, sep = ""))
#Get president name
president <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_text()
#Get year of SOTU speech
year <- SOTUlistpage %>%
html_nodes(".date-display-single") %>%
html_text() %>%
str_sub(-4) %>%
as.numeric()
#Get years active of president
SOTU_pagelinks <- SOTUlistpage %>%
html_nodes(".field-title a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
years_active <- sapply(SOTU_pagelinks, get_years_active)
#Get the party part of the president
presidential_biolinks <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
party <- sapply(presidential_biolinks, get_party)
#Ge the SOTU text
text <- sapply(SOTU_pagelinks, get_speech)
#Combine rows to the final dataset for each loop
sotu_messages <- rbind(sotu_df, data.frame(president, year, years_active, party, speech_type = "written", text, stringsAsFactors = F))
print(paste("page number:", page_number))
}
SOTUlistpage <- read_html("https://www.presidency.ucsb.edu/documents/app-categories/spoken-addresses-and-remarks/presidential/state-the-union-messages")
sotu_df <- data.frame()
for (page_number in seq(from = 0, to = 13,by=1)) {
#State of the Union page that has all the state of the union messages
SOTUlistpage <- read_html(paste("https://www.presidency.ucsb.edu/documents/app-categories/written-messages/presidential/state-the-union-messages?page=",page_number, sep = ""))
#Get president name
president <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_text()
#Get year of SOTU speech
year <- SOTUlistpage %>%
html_nodes(".date-display-single") %>%
html_text() %>%
str_sub(-4) %>%
as.numeric()
#Get years active of president
SOTU_pagelinks <- SOTUlistpage %>%
html_nodes(".field-title a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
years_active <- sapply(SOTU_pagelinks, get_years_active)
#Get the party part of the president
presidential_biolinks <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
party <- sapply(presidential_biolinks, get_party)
#Ge the SOTU text
text <- sapply(SOTU_pagelinks, get_speech)
#Combine rows to the final dataset for each loop
sotu_messages <- rbind(sotu_df, data.frame(president, year, years_active, party, speech_type = "written", text, stringsAsFactors = F))
print(paste("page number:", page_number))
}
view(sotu_messages)
SOTUlistpage <- read_html("https://www.presidency.ucsb.edu/documents/app-categories/written-messages/presidential/state-the-union-messages")
#Get president name
president <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_text()
president
#Get year of SOTU speech
year <- SOTUlistpage %>%
html_nodes(".date-display-single") %>%
html_text() %>%
str_sub(-4) %>%
as.numeric()
year
#Get years active of president
SOTU_pagelinks <- SOTUlistpage %>%
html_nodes(".field-title a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
years_active <- sapply(SOTU_pagelinks, get_years_active)
years_active
#Get the party part of the president
presidential_biolinks <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
party <- sapply(presidential_biolinks, get_party)
party
#Ge the SOTU text
text <- sapply(SOTU_pagelinks, get_speech)
text[1]
sotu_df <- data.frame()
sotu_messages <- data.frame()
for (page_number in seq(from = 0, to = 13,by=1)) {
#State of the Union page that has all the state of the union messages
SOTUlistpage <- read_html(paste("https://www.presidency.ucsb.edu/documents/app-categories/written-messages/presidential/state-the-union-messages?page=",page_number, sep = ""))
#Get president name
president <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_text()
#Get year of SOTU speech
year <- SOTUlistpage %>%
html_nodes(".date-display-single") %>%
html_text() %>%
str_sub(-4) %>%
as.numeric()
#Get years active of president
SOTU_pagelinks <- SOTUlistpage %>%
html_nodes(".field-title a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
years_active <- sapply(SOTU_pagelinks, get_years_active)
#Get the party part of the president
presidential_biolinks <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
party <- sapply(presidential_biolinks, get_party)
#Ge the SOTU text
text <- sapply(SOTU_pagelinks, get_speech)
#Combine rows to the final dataset for each loop
sotu_messages <- rbind(sotu_messages, data.frame(president, year, years_active, party, speech_type = "written", text, stringsAsFactors = F))
print(paste("page number:", page_number))
}
View(sotu_messages)
#Read in SOTU speeches
sotu_speeches <- fread("sotu_speeches.csv")
#combine speeches and messages
sotu_final <- rbind(sotu_speeches, sotu_messages)
#save dataset as csv
fwrite(sotu_final, "sotu_final.csv")
SOTUlistpage <- read_html("https://www.presidency.ucsb.edu/documents/address-before-joint-session-the-congress-0")
#Get president name
president <- SOTUlistpage %>%
html_nodes(".margin-top a") %>%
html_text()
president
#Get president name
president <- SOTUlistpage %>%
html_nodes(".diet-title a") %>%
html_text()
president
#Get years active of president
years_active <- SOTUlistpage %>%
html_nodes("dates") %>%
html_text()
years_active
#Get years active of president
years_active <- SOTUlistpage %>%
html_nodes(".dates") %>%
html_text()
years_active
#Get years active of president
years_active <- SOTUlistpage %>%
html_nodes(".dates") %>%
html_text() %>%
gsub("\\s+", "",.)
years_active
#Get year of SOTU speech
year <- SOTUlistpage %>%
html_nodes(".date-display-single") %>%
html_text() %>%
str_sub(-4) %>%
as.numeric()
year
#Get the party part of the president
presidential_biolinks <- SOTUlistpage %>%
html_nodes(".diet-title a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
presidenti\
presidential_biolinks
#Function to get the political party of president
get_party <- function(presidential_biolinks){
biopage <- read_html(presidential_biolinks)
party <- biopage %>% html_nodes("#block-system-main :nth-child(9)") %>% html_text()
return(party)
}
#Function to get the SOTU text for each president
get_speech <- function(SOTU_pagelinks){
sotulink <- read_html(SOTU_pagelinks)
text <- sotulink %>%
html_nodes(".field-docs-content") %>%
html_text() %>%
str_replace_all("\\s*\\[[^\\]]+\\]", "") %>% #remove bracket text, such as ...[laughter]...
str_replace_all("\n","") %>% #remove instances of \n
str_replace_all("Audience Members.*The President\\.", "") %>% #Take out text from The Audience. --> The President.
str_replace_all("The President\\.", "") %>% # Take out text indicating the president is speaking -> The President.
trimws(which = "both")
return(text)
}
sotu_informal <- data.frame()
for (page_number in seq(from = 0, to = 3,by=1)) {
#State of the Union page that has all the state of the union addresses
SOTUlistpage <- read_html(paste("https://www.presidency.ucsb.edu/documents/address-before-joint-session-the-congress-",page_number, sep = ""))
#Get president name
president <- SOTUlistpage %>%
html_nodes(".diet-title a") %>%
html_text()
#Get year of SOTU speech
year <- SOTUlistpage %>%
html_nodes(".date-display-single") %>%
html_text() %>%
str_sub(-4) %>%
as.numeric()
#Get years active of president
years_active <- SOTUlistpage %>%
html_nodes(".dates") %>%
html_text() %>%
gsub("\\s+", "",.)
#Get the party part of the president
presidential_biolinks <- SOTUlistpage %>%
html_nodes(".diet-title a") %>%
html_attr("href") %>%
paste("https://www.presidency.ucsb.edu",., sep="")
party <- sapply(presidential_biolinks, get_party)
#Ge the SOTU text
text <- sapply(SOTU_pagelinks, get_speech)
#Combine rows to the final dataset for each loop
sotu_informal <- rbind(sotu_informal, data.frame(president, year, years_active, party, speech_type = "speech", text, stringsAsFactors = F))
print(paste("page number:", page_number))
}
sotu_informal[1:5,]
#Prior Service broken out by race/ethnicity
PersonnelShortSingle %>%
filter(!is.na(Race_short2),
Race_short2 != "Other",
FYofRecord >= 2001,
!is.na(Enlisted.Prior.Service)) %>%
mutate(Enlisted.Prior.Service = ifelse(Enlisted.Prior.Service == 1, "Prior Service", "No Prior Service"),
Race_short2 = ifelse(Race_short2 == "Black/African American", "Black/AA", Race_short2)) %>%
group_by(Race_short2, Enlisted.Prior.Service) %>%
summarise(count = n()) %>%
mutate(freq = count / sum(count)) %>%
filter(Enlisted.Prior.Service == "Prior Service") %>%
ggplot(aes(x =factor(Race_short2, levels = c("Asian", "Black/AA", "Hispanic", "Indigenous & Multiracial","White")),
y = freq)) +
geom_col(position = "dodge",
col = "black",
fill = "dodgerblue4") +
scale_y_continuous(labels = scales::percent,
limits = c(0,1),
breaks = c(0,.2,.4,.6,.8,1)) +
xlab("Race/Ethnicity") +
ylab("Proportion of Respective Race/Ethnicity Officer Population") +
geom_text(aes(label = scales::percent(freq,.1)),
position = position_dodge(.9),
vjust =-1,
size = 3) +
theme_bw() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title = element_text(size = 8),
axis.text = element_text(size = 8),
title = element_text(size = 8),
legend.text = element_text(size = 7)) +
ggsave("C:/Users/599126/Documents/ODEI/Cohort Study/Cohort Data/Cohort Report/Race Paper Visuals/PriorService_Race.png", width = 5, height = 3.25, units = "in")
